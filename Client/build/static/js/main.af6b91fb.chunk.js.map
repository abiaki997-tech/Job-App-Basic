{"version":3,"sources":["Job.js","Jobs-Model.js","Jobs.js","App.js","serviceWorker.js","index.js"],"names":["Job","job","onClick","Paper","className","Typography","variant","title","company","location","created_at","split","slice","join","Transition","React","forwardRef","props","ref","Slide","direction","JobsModel","open","handleClose","Dialog","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","id","src","company_logo","DialogContent","DialogContentText","dangerouslySetInnerHTML","__html","description","DialogActions","Button","color","href","url","target","Jobs","jobs","useState","setOpen","selectedJobs","selectJobs","numjobs","length","numpages","Math","ceil","activeStep","setActiveStep","JobsOnPage","component","map","i","key","MobileStepper","steps","position","nextButton","size","prevActiveStep","disabled","backButton","JOB_URL","updateJobs","a","fetch","res","json","App","joblist","useEffect","fetchJobs","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.af6b91fb.chunk.js","sourcesContent":["import React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\nimport './Job.css'\r\n\r\n\r\nfunction Job({job,onClick}){\r\nreturn(\r\n <Paper onClick={onClick} className=\"job\">\r\n  <div >\r\n      <Typography variant=\"h6\">{job.title}</Typography>\r\n      <Typography variant=\"h5\">{job.company}</Typography>\r\n      <Typography>{job.location}</Typography>\r\n  </div>\r\n  <div>\r\n    <Typography>{job.created_at.split(' ').slice(0,4).join(' ')}</Typography>\r\n  </div>\r\n</Paper>\r\n  \r\n)\r\n\r\n}\r\n\r\nexport default Job","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction JobsModel({job,open,handleClose}){\r\n\r\n  if(!job.title){\r\n    return <div/>\r\n  }\r\n\r\n  return (\r\n<div>\r\n  <Dialog\r\n    open={open}\r\n    TransitionComponent={Transition}\r\n    keepMounted\r\n    onClose={handleClose}\r\n    aria-labelledby=\"alert-dialog-slide-title\"\r\n    aria-describedby=\"alert-dialog-slide-description\"\r\n  >\r\n    <DialogTitle id=\"alert-dialog-slide-title\">\r\n      {job.title} -\r\n      {job.company}\r\n      <img className={\"detail-logo\"} src={job.company_logo}/>\r\n      </DialogTitle>\r\n\r\n    <DialogContent>\r\n      <DialogContentText id=\"alert-dialog-slide-description\">\r\n\r\n       <div dangerouslySetInnerHTML={{__html:job.description}} />\r\n           {/* html string render */}\r\n      </DialogContentText>\r\n    </DialogContent>\r\n    <DialogActions>\r\n      <Button onClick={handleClose} color=\"primary\">\r\n        Close\r\n      </Button>\r\n\r\n      <a href={job.url} target=\"_blank\">\r\n          <Button  color=\"primary\">\r\n            Apply\r\n          </Button>\r\n      </a>\r\n    </DialogActions>\r\n  </Dialog>\r\n</div>\r\n);\r\n}\r\n\r\nexport default JobsModel","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport MobileStepper from '@material-ui/core/MobileStepper';\r\nimport Button from '@material-ui/core/Button';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\n\r\nimport Job from './Job'\r\nimport JobsModel from './Jobs-Model'\r\n\r\n\r\nfunction Jobs({jobs}){\r\n  //modals\r\n  const [open, setOpen] = React.useState(false);\r\n  const [selectedJobs,selectJobs]=React.useState([])\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  //pagination\r\n  const numjobs=jobs.length;\r\n  const numpages=Math.ceil(numjobs/100)\r\n\r\n  const [activeStep, setActiveStep] = React.useState(0);\r\n\r\n  const JobsOnPage=jobs.slice(activeStep * 20 ,(activeStep * 20)+20)\r\n\r\n  //step 0 show (0 to 49)\r\n  //step 1 show (50 to 99)\r\n\r\n  const handleNext = () => {\r\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\r\n  };\r\n  \r\nreturn(\r\n  <div className=\"jobs\">\r\n    <JobsModel open={open} job={selectedJobs} handleClose={handleClose}/>\r\n    <Typography variant=\"h4\" component=\"h1\">\r\n       Entry Level Software Jobs\r\n    </Typography> \r\n    <Typography variant=\"h6\" component=\"h2\">\r\n         Found {numjobs} Jobs\r\n    </Typography> \r\n    {\r\n       JobsOnPage.map(\r\n         (job,i) => < Job key={i} job={job} onClick={()=> {\r\n          handleClickOpen();\r\n          selectJobs(job)\r\n            } } />\r\n            )\r\n    } \r\n\r\n    <div>\r\n      Page {activeStep} of {numpages-1}\r\n    </div>\r\n      <MobileStepper\r\n      variant=\"progress\"\r\n      steps={numpages}\r\n      position=\"static\"\r\n      activeStep={activeStep}\r\n      nextButton={\r\n        <Button size=\"small\" onClick={handleNext} disabled={activeStep === 5}>\r\n          Next\r\n         <KeyboardArrowRight />\r\n        </Button>\r\n      }\r\n      backButton={\r\n        <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\r\n          <KeyboardArrowLeft />\r\n          Back\r\n        </Button>\r\n      }\r\n    />\r\n   \r\n  </div>\r\n  \r\n)\r\n\r\n}\r\n\r\nexport default Jobs\r\n\r\n// jobs.map((job) => < Job job={job} />)","import React from 'react';\nimport './App.css';\n\nimport Jobs from './Jobs'\n\nconst JOB_URL='http://localhost:3001/jobs'\n\n// const mockJobs=[\n//   {title: 'SWE 1', company: 'Google'},\n//   {title: 'SWE 1', company: 'Apple'},\n//   {title: 'SWE 1', company: 'Facebook'}\n// ]\n\nasync function fetchJobs(updateJobs){\n  const res=await fetch(JOB_URL)\n  const json=await res.json();\n\n  updateJobs(json)\n  // console.log(json)\n}\n\nfunction App() {\n\n  const [joblist,updateJobs]=React.useState([])\n\n  React.useEffect(()=>{\n    fetchJobs(updateJobs)\n  },[])\n\n  return(\n    <div className=\"App\">\n     <Jobs jobs={joblist}/>\n    </div>\n  ) \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}